// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artefactual-sdps/preprocessing-sfa/internal/amss (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -typed -destination=./internal/amss/fake/mock_client.go -package=fake github.com/artefactual-sdps/preprocessing-sfa/internal/amss Client
//

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// DownloadAIPFile mocks base method.
func (m *MockClient) DownloadAIPFile(arg0 context.Context, arg1, arg2 string, arg3 io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadAIPFile", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadAIPFile indicates an expected call of DownloadAIPFile.
func (mr *MockClientMockRecorder) DownloadAIPFile(arg0, arg1, arg2, arg3 any) *MockClientDownloadAIPFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadAIPFile", reflect.TypeOf((*MockClient)(nil).DownloadAIPFile), arg0, arg1, arg2, arg3)
	return &MockClientDownloadAIPFileCall{Call: call}
}

// MockClientDownloadAIPFileCall wrap *gomock.Call
type MockClientDownloadAIPFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientDownloadAIPFileCall) Return(arg0 error) *MockClientDownloadAIPFileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientDownloadAIPFileCall) Do(f func(context.Context, string, string, io.Writer) error) *MockClientDownloadAIPFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientDownloadAIPFileCall) DoAndReturn(f func(context.Context, string, string, io.Writer) error) *MockClientDownloadAIPFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAIPPath mocks base method.
func (m *MockClient) GetAIPPath(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAIPPath", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAIPPath indicates an expected call of GetAIPPath.
func (mr *MockClientMockRecorder) GetAIPPath(arg0, arg1 any) *MockClientGetAIPPathCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAIPPath", reflect.TypeOf((*MockClient)(nil).GetAIPPath), arg0, arg1)
	return &MockClientGetAIPPathCall{Call: call}
}

// MockClientGetAIPPathCall wrap *gomock.Call
type MockClientGetAIPPathCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientGetAIPPathCall) Return(arg0 string, arg1 error) *MockClientGetAIPPathCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientGetAIPPathCall) Do(f func(context.Context, string) (string, error)) *MockClientGetAIPPathCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientGetAIPPathCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockClientGetAIPPathCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
