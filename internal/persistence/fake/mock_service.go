// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artefactual-sdps/preprocessing-sfa/internal/persistence (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -typed -destination=./internal/persistence/fake/mock_service.go -package=fake github.com/artefactual-sdps/preprocessing-sfa/internal/persistence Service
//

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateSIP mocks base method.
func (m *MockService) CreateSIP(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSIP", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSIP indicates an expected call of CreateSIP.
func (mr *MockServiceMockRecorder) CreateSIP(arg0, arg1, arg2 any) *MockServiceCreateSIPCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSIP", reflect.TypeOf((*MockService)(nil).CreateSIP), arg0, arg1, arg2)
	return &MockServiceCreateSIPCall{Call: call}
}

// MockServiceCreateSIPCall wrap *gomock.Call
type MockServiceCreateSIPCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreateSIPCall) Return(arg0 error) *MockServiceCreateSIPCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreateSIPCall) Do(f func(context.Context, string, string) error) *MockServiceCreateSIPCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreateSIPCall) DoAndReturn(f func(context.Context, string, string) error) *MockServiceCreateSIPCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
