// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artefactual-sdps/preprocessing-sfa/internal/fformat (interfaces: Identifier)
//
// Generated by this command:
//
//	mockgen -typed -destination=./internal/fformat/fake/mock_identifier.go -package=fake github.com/artefactual-sdps/preprocessing-sfa/internal/fformat Identifier
//

// Package fake is a generated GoMock package.
package fake

import (
	reflect "reflect"

	fformat "github.com/artefactual-sdps/preprocessing-sfa/internal/fformat"
	gomock "go.uber.org/mock/gomock"
)

// MockIdentifier is a mock of Identifier interface.
type MockIdentifier struct {
	ctrl     *gomock.Controller
	recorder *MockIdentifierMockRecorder
}

// MockIdentifierMockRecorder is the mock recorder for MockIdentifier.
type MockIdentifierMockRecorder struct {
	mock *MockIdentifier
}

// NewMockIdentifier creates a new mock instance.
func NewMockIdentifier(ctrl *gomock.Controller) *MockIdentifier {
	mock := &MockIdentifier{ctrl: ctrl}
	mock.recorder = &MockIdentifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentifier) EXPECT() *MockIdentifierMockRecorder {
	return m.recorder
}

// Identify mocks base method.
func (m *MockIdentifier) Identify(arg0 string) (*fformat.FileFormat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Identify", arg0)
	ret0, _ := ret[0].(*fformat.FileFormat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Identify indicates an expected call of Identify.
func (mr *MockIdentifierMockRecorder) Identify(arg0 any) *MockIdentifierIdentifyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identify", reflect.TypeOf((*MockIdentifier)(nil).Identify), arg0)
	return &MockIdentifierIdentifyCall{Call: call}
}

// MockIdentifierIdentifyCall wrap *gomock.Call
type MockIdentifierIdentifyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIdentifierIdentifyCall) Return(arg0 *fformat.FileFormat, arg1 error) *MockIdentifierIdentifyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIdentifierIdentifyCall) Do(f func(string) (*fformat.FileFormat, error)) *MockIdentifierIdentifyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIdentifierIdentifyCall) DoAndReturn(f func(string) (*fformat.FileFormat, error)) *MockIdentifierIdentifyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Version mocks base method.
func (m *MockIdentifier) Version() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockIdentifierMockRecorder) Version() *MockIdentifierVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockIdentifier)(nil).Version))
	return &MockIdentifierVersionCall{Call: call}
}

// MockIdentifierVersionCall wrap *gomock.Call
type MockIdentifierVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIdentifierVersionCall) Return(arg0 string) *MockIdentifierVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIdentifierVersionCall) Do(f func() string) *MockIdentifierVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIdentifierVersionCall) DoAndReturn(f func() string) *MockIdentifierVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
