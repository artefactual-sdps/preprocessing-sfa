// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package enums

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"strings"
)

const (
	// TransferTypeVecteurAIP is a TransferType of type VecteurAIP.
	TransferTypeVecteurAIP TransferType = "VecteurAIP"
	// TransferTypeVecteurSIP is a TransferType of type VecteurSIP.
	TransferTypeVecteurSIP TransferType = "VecteurSIP"
)

var ErrInvalidTransferType = fmt.Errorf("not a valid TransferType, try [%s]", strings.Join(_TransferTypeNames, ", "))

var _TransferTypeNames = []string{
	string(TransferTypeVecteurAIP),
	string(TransferTypeVecteurSIP),
}

// TransferTypeNames returns a list of possible string values of TransferType.
func TransferTypeNames() []string {
	tmp := make([]string, len(_TransferTypeNames))
	copy(tmp, _TransferTypeNames)
	return tmp
}

// String implements the Stringer interface.
func (x TransferType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x TransferType) IsValid() bool {
	_, err := ParseTransferType(string(x))
	return err == nil
}

var _TransferTypeValue = map[string]TransferType{
	"VecteurAIP": TransferTypeVecteurAIP,
	"VecteurSIP": TransferTypeVecteurSIP,
}

// ParseTransferType attempts to convert a string to a TransferType.
func ParseTransferType(name string) (TransferType, error) {
	if x, ok := _TransferTypeValue[name]; ok {
		return x, nil
	}
	return TransferType(""), fmt.Errorf("%s is %w", name, ErrInvalidTransferType)
}

func (x TransferType) Ptr() *TransferType {
	return &x
}

// MarshalText implements the text marshaller method.
func (x TransferType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *TransferType) UnmarshalText(text []byte) error {
	tmp, err := ParseTransferType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errTransferTypeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *TransferType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = TransferType("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseTransferType(v)
	case []byte:
		*x, err = ParseTransferType(string(v))
	case TransferType:
		*x = v
	case *TransferType:
		if v == nil {
			return errTransferTypeNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errTransferTypeNilPtr
		}
		*x, err = ParseTransferType(*v)
	default:
		return errors.New("invalid type for TransferType")
	}

	return
}

// Value implements the driver Valuer interface.
func (x TransferType) Value() (driver.Value, error) {
	return x.String(), nil
}

// Set implements the Golang flag.Value interface func.
func (x *TransferType) Set(val string) error {
	v, err := ParseTransferType(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *TransferType) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *TransferType) Type() string {
	return "TransferType"
}

// Values implements the entgo.io/ent/schema/field EnumValues interface.
func (x TransferType) Values() []string {
	return TransferTypeNames()
}

// TransferTypeInterfaces returns an interface list of possible values of TransferType.
func TransferTypeInterfaces() []interface{} {
	var tmp []interface{}
	for _, v := range _TransferTypeNames {
		tmp = append(tmp, v)
	}
	return tmp
}

// ParseTransferTypeWithDefault attempts to convert a string to a ContentType.
// It returns the default value if name is empty.
func ParseTransferTypeWithDefault(name string) (TransferType, error) {
	if name == "" {
		return _TransferTypeValue[_TransferTypeNames[0]], nil
	}
	if x, ok := _TransferTypeValue[name]; ok {
		return x, nil
	}
	return TransferType(""), fmt.Errorf("%s is not a valid TransferType, try [%s]", name, strings.Join(_TransferTypeNames, ", "))
}

// NormalizeTransferType attempts to parse a and normalize string as content type.
// It returns the input untouched if name fails to be parsed.
// Example:
//
//	"enUM" will be normalized (if possible) to "Enum"
func NormalizeTransferType(name string) string {
	res, err := ParseTransferType(name)
	if err != nil {
		return name
	}
	return res.String()
}
